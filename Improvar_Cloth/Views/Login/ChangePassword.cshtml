@model Improvar.Models.Password
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Change Password</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    <link rel="stylesheet" href="~/Content/login_signup.css?v=105" />
    <link rel="shortcut icon" type="image/x-icon" href="~/favicon.ico">
    <script>
        function ShowHide() {
            var x1 = document.getElementById("CurrentPassword");
            var x2 = document.getElementById("eye");
            var x3 = document.getElementById("eye_close");
            if (x1.type === "password") {
                x1.type = "text";
                x2.style.display = "none";
                x3.style.display = "block";
                return false;
                //window.onload = ShowHide();
            }
            else {
                x1.type = "password";
                x2.style.display = "block";
                x3.style.display = "none";
                return false;
                //window.onload = ShowHide();
            }
            //window.onload = ShowHide();
        }
    </script>
    <script>
        function ShowHide1() {
            var x1 = document.getElementById("NewPassword");
            var x2 = document.getElementById("eye1");
            var x3 = document.getElementById("eye_close1");
            if (x1.type === "password") {
                x1.type = "text";
                x2.style.display = "none";
                x3.style.display = "block";
                return false;
                //window.onload = ShowHide();
            }
            else {
                x1.type = "password";
                x2.style.display = "block";
                x3.style.display = "none";
                return false;
                //window.onload = ShowHide();
            }
            //window.onload = ShowHide();
        }
    </script>
    <style>
        #pswvalidmsg {
            padding: 1px 5px;
            font-size: 18px;
        }
        /* Add a green text color and a checkmark when the requirements are right */
        .valid {
            color: green;
        }

            .valid:before {
                position: relative;
                left: -5px;
                content: "✔";
            }

        /* Add a red text color and an "x" when the requirements are wrong */
        .invalid {
            color: red;
        }

            .invalid:before {
                position: relative;
                left: -5px;
                content: "✖";
            }
    </style>
    <script>
        $(document).ready(function () {
            var myInput = document.getElementById("NewPassword");
            var NOOFTXTCHAR = document.getElementById("p_NOOFTXTCHAR");
            var NOOFLOWERCHAR = document.getElementById("p_NOOFLOWERCHAR");
            var NOOFUPPERCHAR = document.getElementById("p_NOOFUPPERCHAR");
            var NOOFSPCHAR = document.getElementById("p_NOOFSPCHAR");
            var NOOFNUMCHAR = document.getElementById("p_NOOFNUMCHAR");
            var MINPWDLENGTH = document.getElementById("p_MINPWDLENGTH");
            var MAXPWDLENGTH = document.getElementById("p_MAXPWDLENGTH");

            // When the user starts to type something inside the password field
            myInput.onkeyup = function () {
                // Validate lowercase letters
                if (NOOFTXTCHAR != null) {
                    var textCaseLetters = /[a-zA-Z]/g;
                    if (myInput.value.match(textCaseLetters)) {
                        NOOFTXTCHAR.classList.remove("invalid");
                        NOOFTXTCHAR.classList.add("valid");
                    } else {
                        NOOFTXTCHAR.classList.remove("valid");
                        NOOFTXTCHAR.classList.add("invalid");
                    }
                }

                // Validate lowercase letters
                if (NOOFLOWERCHAR != null) {
                    var lowerCaseLetters = /[a-z]/g;
                    if (myInput.value.match(lowerCaseLetters)) {
                        NOOFLOWERCHAR.classList.remove("invalid");
                        NOOFLOWERCHAR.classList.add("valid");
                    } else {
                        NOOFLOWERCHAR.classList.remove("valid");
                        NOOFLOWERCHAR.classList.add("invalid");
                    }
                }

                // Validate capital letters
                if (NOOFUPPERCHAR != null) {
                    var upperCaseLetters = /[A-Z]/g;
                    if (NOOFUPPERCHAR != null && myInput.value.match(upperCaseLetters)) {
                        NOOFUPPERCHAR.classList.remove("invalid");
                        NOOFUPPERCHAR.classList.add("valid");
                    } else {
                        NOOFUPPERCHAR.classList.remove("valid");
                        NOOFUPPERCHAR.classList.add("invalid");
                    }
                }

                // Validate numbers
                if (NOOFNUMCHAR != null) {
                    var numbers = /[0-9]/g;
                    if (myInput.value.match(numbers)) {
                        NOOFNUMCHAR.classList.remove("invalid");
                        NOOFNUMCHAR.classList.add("valid");
                    } else {
                        NOOFNUMCHAR.classList.remove("valid");
                        NOOFNUMCHAR.classList.add("invalid");
                    }
                }

                // Validate special char
                if (NOOFSPCHAR != null) {
                    var splchars = /[!@@#$%^&*]/g;
                    if (myInput.value.match(splchars)) {
                        NOOFSPCHAR.classList.remove("invalid");
                        NOOFSPCHAR.classList.add("valid");
                    } else {
                        NOOFSPCHAR.classList.remove("valid");
                        NOOFSPCHAR.classList.add("invalid");
                    }
                }
                // Validate min length
                if (MINPWDLENGTH != null) {
                    if (MINPWDLENGTH != null && myInput.value.length >= parseInt(@Model.MINPWDLENGTH)) {
                        MINPWDLENGTH.classList.remove("invalid");
                        MINPWDLENGTH.classList.add("valid");
                    } else {
                        MINPWDLENGTH.classList.remove("valid");
                        MINPWDLENGTH.classList.add("invalid");
                    }
                }

                // Validate maxn length
                if (MAXPWDLENGTH != null) {
                    if (myInput.value.length <= parseInt(@Model.MAXPWDLENGTH)) {
                        MAXPWDLENGTH.classList.remove("invalid");
                        MAXPWDLENGTH.classList.add("valid");
                    } else {
                        MAXPWDLENGTH.classList.remove("valid");
                        MAXPWDLENGTH.classList.add("invalid");
                    }
                }
            }
        });
    </script>
</head>
<body class="bodyclass">
    <div class="modal-content">
        <center>
            <img src="~/Image/IPSMART-LOGO.png" height="70px" width="70px" />
            <h3>
                Change password
            </h3>

        </center><br />

        <div class="row">
            <div class="col-lg-6">
                <div id="pswvalidmsg">
                    <h4>Password must contain the following:</h4>
                    @if (Model.NOOFTXTCHAR != 0)
                    {
                        <p id="p_NOOFTXTCHAR" class="invalid"><b>@Html.DisplayFor(model => model.NOOFTXTCHAR)</b> Text [e.g. anything]</p>
                    }
                    @if (Model.NOOFLOWERCHAR != 0)
                    {
                        <p id="p_NOOFLOWERCHAR" class="invalid"><b>@Html.DisplayFor(model => model.NOOFLOWERCHAR)</b> Lower [e.g. a-z]</p>
                    }
                    @if (Model.NOOFUPPERCHAR != 0)
                    {
                        <p id="p_NOOFUPPERCHAR" class="invalid"><b>@Html.DisplayFor(model => model.NOOFUPPERCHAR)</b> Upper [e.g. A-Z]</p>
                    }
                    @if (Model.NOOFSPCHAR != 0)
                    {
                        <p id="p_NOOFSPCHAR" class="invalid"><b>@Html.DisplayFor(model => model.NOOFSPCHAR)</b> Special [e.g. !@@#$%^&*] </p>
                    }
                    @if (Model.NOOFNUMCHAR != 0)
                    {
                        <p id="p_NOOFNUMCHAR" class="invalid"><b>@Html.DisplayFor(model => model.NOOFNUMCHAR)</b> Numeric [e.g. 0-9]</p>
                    }
                    @if (Model.MINPWDLENGTH != 0)
                    {
                        <p id="p_MINPWDLENGTH" class="invalid">Length >= <b>@Html.DisplayFor(model => model.MINPWDLENGTH)</b></p>
                    }
                    @if (Model.MAXPWDLENGTH != 0)
                    {
                        <p id="p_MAXPWDLENGTH" class="invalid">Length <= <b>@Html.DisplayFor(model => model.MAXPWDLENGTH)</b></p>
                    }
                </div>
            </div>
            <div class="col-lg-6">
                <section class="">
                    @using (Html.BeginForm())
                    {
                        @Html.HiddenFor(model => model.NOOFTXTCHAR)
                        @Html.HiddenFor(model => model.NOOFLOWERCHAR)
                        @Html.HiddenFor(model => model.NOOFUPPERCHAR)
                        @Html.HiddenFor(model => model.NOOFSPCHAR)
                        @Html.HiddenFor(model => model.NOOFNUMCHAR)
                        @Html.HiddenFor(model => model.MINPWDLENGTH)
                        @Html.HiddenFor(model => model.MAXPWDLENGTH)
                        if (Model != null && string.IsNullOrEmpty(Model.UserName))
                        {
                            @Html.LabelFor(model => model.UserName)
                            @Html.TextBoxFor(model => model.UserName, new { @class = "ttext", placeholder = "User Name", required = "required" })
                        }
                        else
                        {
                            @Html.HiddenFor(w => w.UserName)
                        }

                        @Html.LabelFor(model => model.CurrentPassword)
                        @Html.PasswordFor(model => model.CurrentPassword, new { id = "CurrentPassword", @class = "passview1 blocks1", placeholder = "Current Password", required = "required" })
                        <img src="~/Image/pass_eye_close.png" name="pa2" id="eye" style="cursor:pointer" class="passview2 blocks1" onclick="ShowHide();">
                        <img src="~/Image/pass_eye.png" style="display:none;cursor:pointer " name="pa3" id="eye_close" class="passview2 blocks1" onclick="ShowHide();">
                        <br />

                        @Html.LabelFor(model => model.NewPassword)<br />
                        @Html.PasswordFor(model => model.NewPassword, new { id = "NewPassword", @class = "passview1 blocks1", required = "required", placeholder = "New Password" })
                        <img src="~/Image/pass_eye_close.png" name="pa2" id="eye1" style="cursor:pointer" class="passview2 blocks1" onclick="ShowHide1();">
                        <img src="~/Image/pass_eye.png" style="display:none;cursor:pointer " name="pa3" id="eye_close1" class="passview2 blocks1" onclick="ShowHide1();">

                        @Html.LabelFor(model => model.ConfirmPassword)
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "ttext", required = "required", placeholder = "Confirm Password" })


                        @Html.HiddenFor(model => model.CPF)
                        <center>
                            <button type="submit" class="btn btn-success">Change</button>
                            <button type="reset" class="btn btn-info">Reset</button>
                            @if (ViewBag.FlagCS == null)
                            {
                                if (Model.CPF == "10")
                                {
                                    <button type="button" onclick="location.href='@Url.Action("multiVu","Multiviewer")'" class="btn btn-primary">Back</button>
                                }
                                else
                                {
                                    <button type="button" onclick="location.href='@Url.Action("Login","Login")'" class="btn btn-primary">Back</button>
                                }
                            }
                            else
                            {
                                <button type="button" onclick="location.href='@Url.Action("Login","Login")'" class="btn btn-primary">Login</button>
                            }
                        </center>
                        <span style="color:red">
                            @ViewBag.Msg
                        </span>
                        <span style="color:green">@ViewBag.MessageCS</span>









                        @*<p>
                                                    <input type="submit" value="Change" class="btn btn-danger" />
                                                    <input type="reset" value="Reset" class="btn btn-success" />
                                                </p>
                            <p>
                                @if (ViewBag.FlagCS == "1")
                                {
                                    <center>
                                        <span style="color:#a92525">@ViewBag.MessageCS</span>
                                        <a href="@Url.Action("Login", "Login")" class="btn btn-primary btn-lg">Re-login  &raquo;</a>
                                    </center>
                                }
                                else
                                {

                                                    @*<button type="button" onclick="location.href='@Url.Action("Login","Login")'" class="btn btn-primary btn-sm">Login</button>*@

                    }

                </section>
            </div>
        </div>
    </div>
    @Scripts.Render("~/bundles/bootstrap")
</body>
</html>
