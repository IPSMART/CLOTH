using System;
using System.Linq;
using System.Web.Mvc;
using Improvar.Models;                                                  // Modified By Prakash Kunwar Dated 24-11-2018
using Improvar.ViewModels;
using System.Data;
using CrystalDecisions.CrystalReports.Engine;
using System.IO;
using System.Collections.Generic;

namespace Improvar.Controllers
{
    public class SaleBill_PrintController : Controller
    {
        string CS = null;
        Connection Cn = new Connection();
        MasterHelp masterHelp = new MasterHelp();
        MasterHelpFa MasterHelpFa = new MasterHelpFa();
        Salesfunc Salesfunc = new Salesfunc();
        // GET: SaleBill_Print
        public ActionResult SaleBill_Print()
        {
            try
            {
                if (Session["UR_ID"] == null)
                {
                    return RedirectToAction("Login", "Login");
                }
                else
                {
                    ViewBag.formname = "Document Printing";
                    ReportViewinHtml VE;
                    if (TempData["printparameter"] == null)
                    {
                        VE = new ReportViewinHtml();
                    }
                    else
                    {
                        VE = (ReportViewinHtml)TempData["printparameter"];
                    }
                    string MENU_PARAMETER = VE.MENU_PARA;
                    Cn.getQueryString(VE);
                    ImprovarDB DB = new ImprovarDB(Cn.GetConnectionString(), CommVar.CurSchema());
                    VE.TEXTBOX1 = (from j in DB.M_DOCTYPE where j.DOCCD == VE.DOCCD select j.DOCNM).SingleOrDefault();
                    string reptype = "SALEBILL";
                    if (VE.maxdate == "CHALLAN") reptype = "CHALLAN";
                    DataTable repformat = Salesfunc.getRepFormat(reptype, VE.DOCCD);
                    if (repformat != null)
                    {
                        VE.DropDown_list1 = (from DataRow dr in repformat.Rows
                                             select new DropDown_list1()
                                             {
                                                 text = dr["text"].ToString(),
                                                 value = dr["value"].ToString()
                                             }).ToList();
                    }
                    else
                    {
                        List<DropDown_list1> drplst = new List<DropDown_list1>();
                        VE.DropDown_list1 = drplst;
                    }
                    VE = (ReportViewinHtml)Cn.EntryCommonLoading(VE, VE.PermissionID);
                    VE.MENU_PARA = MENU_PARAMETER;
                    VE.DefaultView = true;
                    VE.ExitMode = 1;
                    VE.DefaultDay = 0;
                    return View(VE);
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message + ex.InnerException);
            }
        }
        public ActionResult GetDOC_Code(string val)
        {
            try
            {
                if (val == null)
                {
                    return PartialView("_Help2", masterHelp.DOCCD_help(val, "", ""));
                }
                else
                {
                    string str = masterHelp.DOCCD_help(val, "", "");
                    return Content(str);
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message + ex.InnerException);
            }
        }
        public ActionResult GetDOC_Number(string val, string Code)
        {
            try
            {
                if (val == null)
                {
                    return PartialView("_Help2", masterHelp.DOCNO_help(val, Code));
                }
                else
                {
                    string str = masterHelp.DOCNO_help(val, Code);
                    return Content(str);
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message + ex.InnerException);
            }
        }
        public ActionResult GetSLCDhelp(string val)
        {
            try
            {
                string LINK_CD = "D,C";
                if (val == null)
                {
                    return PartialView("_Help2", masterHelp.SubLeg_help(val, LINK_CD));
                }
                else
                {
                    string str = masterHelp.SubLeg_help(val, LINK_CD);
                    return Content(str);
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message + ex.InnerException);
            }
        }
        [HttpPost]
        public ActionResult SaleBill_Print(ReportViewinHtml VE, FormCollection FC, string submitbutton)
        {
            try
            {
                ImprovarDB DB1 = new ImprovarDB(Cn.GetConnectionString(), Cn.Getschema);
                ImprovarDB DB = new ImprovarDB(Cn.GetConnectionString(), CommVar.CurSchema());
                ImprovarDB DBF = new ImprovarDB(Cn.GetConnectionString(), CommVar.FinSchema());
                var printemail = submitbutton.ToString();
                
                string fdate = "", tdate = "";
                if (VE.FDT != null)
                {
                    fdate = Convert.ToString(Convert.ToDateTime(FC["FDT"].ToString())).Substring(0, 10);
                }
                if (VE.TDT != null)
                {
                    tdate = Convert.ToString(Convert.ToDateTime(FC["TDT"].ToString())).Substring(0, 10);
                }
                string fdocno = FC["FDOCNO"].ToString();
                string tdocno = FC["TDOCNO"].ToString();
                string doccd = FC["doccd"].ToString();
                string docnm = DB.M_DOCTYPE.Find(doccd).DOCNM;
                string slcd = VE.TEXTBOX2;

                string[] copyno = new string[6];
                if (VE.Checkbox1 == true) copyno[0] = "Y"; else copyno[0] = "N";
                if (VE.Checkbox2 == true) copyno[1] = "Y"; else copyno[1] = "N";
                if (VE.Checkbox3 == true) copyno[2] = "Y"; else copyno[2] = "N";
                if (VE.Checkbox4 == true) copyno[3] = "Y"; else copyno[3] = "N";
                if (VE.Checkbox5 == true) copyno[4] = "Y"; else copyno[4] = "N";
                if (VE.Checkbox6 == true) copyno[5] = "Y"; else copyno[5] = "N";
                
                if (copyno[0] == "N" && copyno[1] == "N" && copyno[2] == "N" && copyno[3] == "N" && copyno[4] == "N" && copyno[5] == "N")
                {
                    copyno[0] = "Y";
                }

                string LOC = CommVar.Loccd(), COM = CommVar.Compcd(), Scm1 = CommVar.CurSchema(), Scmi = CommVar.InvSchema(), Scmf = CommVar.FinSchema();
                string str1 = "";
                DataTable rsTmp;
                string doctype = "";
                str1 = "select doctype from " + Scm1 + ".m_doctype where doccd='" + VE.DOCCD + "'";
                rsTmp = masterHelp.SQLquery(str1);
                doctype = rsTmp.Rows[0]["doctype"].ToString();

                string prnemailid = "";
                if (VE.TEXTBOX5 != null) prnemailid = "'" + VE.TEXTBOX5 + "' regemailid"; else prnemailid = "a.regemailid";
                if (VE.TEXTBOX5 != null) prnemailid = "'" + VE.TEXTBOX5 + "' regemailid"; else prnemailid = "e.regemailid";
                bool inttermsprint = true, cashdiscprint = true;
                //if (FC["discterms"].ToString() == "off") cashdiscprint = false;
                var cc  = FC["discterms"].ToString();
                if (cc == "false") cashdiscprint = false;
                string sql = "", sqlc = "";
                sql = "";

                sqlc = "";
                sqlc += "c.compcd='" + COM + "' and c.loccd='" + LOC + "' and c.doccd='" + doccd + "' ";
                if (fdocno != "") sqlc += "and c.doconlyno >= '" + fdocno + "' and c.doconlyno <= '" + tdocno + "' ";
                if (fdate != "") sqlc += "and c.docdt >= to_date('" + fdate + "','dd/mm/yyyy') ";
                if (tdate != "") sqlc += "and c.docdt <= to_date('" + tdate + "','dd/mm/yyyy') ";
                if (slcd != null) sqlc += "and b.slcd='" + slcd + "' ";

                sql += "select a.autono, b.doctag, h.doccd, h.docno, h.docdt, b.duedays, h.canc_rem, h.cancel, ";
                sql += "b.gocd, k.gonm, k.goadd1, k.goadd2, k.goadd3, k.gophno, k.goemail, k.fssailicno, h.usr_id, ";

                sql += "b.slcd, nvl(e.fullname,e.slnm) slnm, e.regmobile, " + prnemailid + ", e.add1 sladd1, e.add2 sladd2, e.add3 sladd3, e.add4 sladd4, e.add5 sladd5, e.add6 sladd6, e.add7  ";
                sql += "sladd7, e.gstno, e.panno, e.phno1 phno, e.state, e.country, e.statecd, ";
                sql += "nvl(b.conslcd,b.slcd) cslcd, '' cpartycd, nvl(f.fullname,f.slnm) cslnm, f.add1 csladd1, f.add2 csladd2, f.add3 csladd3, f.add4 csladd4, f.add5 csladd5, ";
                sql += "f.add6 csladd6, f.add7 csladd7, f.gstno cgstno, f.panno cpanno, f.phno1 cphno, f.state cstate, f.statecd cstatecd, ";

                sql += "a.trslcd, g.slnm trslnm, g.gstno trgst, g.add1 trsladd1, g.add2 trsladd2, g.add3 trsladd3, g.add4 trsladd4, g.phno1 trslphno, ";
                sql += "c.lrno, c.lrdt, c.lorryno, c.ewaybillno, c.grwt, c.ntwt, ";
                sql += "a.slno, a.itcd, y.stktype, a.itnm, nvl(n.stylenodisp,n.styleno) styleno, a.sizecd, o.sizenm, o.print_seq, nvl(a.pcsperbox,0) pcsperbox, nvl(a.pcsperset,0) pcsperset, a.hsnsaccd, a.nos, a.qnty, nvl(i.decimals,0) qdecimal, i.uomnm,  ";
                sql += "a.rate, a.itemval, a.amt basamt, d.cod, d.docrem, d.docth, d.agslcd, m.slnm agslnm, m.regemailid agregemailid, ";
                sql += "a.scmdiscrate, a.scmdisctype, a.scmdiscamt, a.discrate, a.disctype, a.discamt, a.tddiscrate, a.tddisctype, a.tddiscamt, ";
                sql += "a.agdocno, a.agdocdt, d.casenos, nvl(d.noofcases,0) noofcases, ";
                sql += "a.igstper, a.igstamt, a.cgstper, a.cgstamt, a.sgstper, a.sgstamt, a.dutyper, a.dutyamt, a.cessper, a.cessamt, a.igstper+a.cgstper+a.sgstper gstper,  ";
                sql += "b.roamt, b.blamt, b.tcsper, b.tcsamt, d.insby, ";
                sql += "nvl(d.othadd1,f.othadd1) othadd1, decode(d.othadd1,null,f.othadd2,d.othadd2) othadd2, decode(d.othadd1,null,f.othadd3,d.othadd3) othadd3, decode(d.othadd1,null,f.othadd4,d.othadd4) othadd4, ";
                sql += "nvl(d.plsupply,e.state) plsupply, nvl(d.destn,e.district) destn, d.payterms from ( ";

                sql += "select a.autono, nvl(i.translcd,i.crslcd) trslcd, a.autono||a.slno autoslno, a.slno, nvl(a.altitcd,a.itcd) itcd, nvl(a.altsizecd,a.sizecd) sizecd, d.itnm, d.uomcd, nvl(d.hsnsaccd,f.hsnsaccd) hsnsaccd, d.pcsperbox, d.pcsperset, ";
                sql += "a.nos, sum(a.qnty) qnty, a.rate, sum(a.amt-nvl(a.scmdiscamt,0)-nvl(a.discamt,0)-nvl(a.tddiscamt,0)) itemval, sum(a.amt) amt, ";
                sql += "nvl(a.scmdiscrate,0) scmdiscrate, a.scmdisctype, sum(nvl(a.scmdiscamt,0)) scmdiscamt, ";
                sql += "nvl(a.discrate,0) discrate, a.disctype, sum(nvl(a.discamt,0)) discamt, ";
                sql += "nvl(a.tddiscrate,0) tddiscrate, a.tddisctype, sum(nvl(a.tddiscamt,0)) tddiscamt, ";
                sql += "a.agdocno, to_char(a.agdocdt, 'dd/mm/yyyy') agdocdt, ";
                //sql += "listagg(o.batchno || ' (' || n.qnty || ')', ', ') within group (order by n.autono, n.slno, n.batchautono) batchdtl, ";
                sql += "a.igstper, sum(a.igstamt) igstamt, a.cgstper, sum(a.cgstamt) cgstamt, a.sgstper, sum(a.sgstamt) sgstamt, a.dutyper, sum(a.dutyamt) dutyamt, a.cessper, sum(a.cessamt) cessamt  ";
                sql += "from " + Scm1 + ".t_txndtl a, " + Scm1 + ".t_txn b, " + Scm1 + ".t_cntrl_hdr c, " + Scm1 + ".m_sitem d, " + Scm1 + ".m_group f, " + Scm1 + ".t_txntrans i ";
                sql += "where a.autono=b.autono and a.autono=c.autono and a.itcd=d.itcd and d.itgrpcd=f.itgrpcd(+) and a.autono=i.autono(+) and ";
                sql += sqlc;
                sql += "group by a.autono, nvl(i.translcd,i.crslcd), a.autono||a.slno, a.slno, nvl(a.altitcd,a.itcd), nvl(a.altsizecd,a.sizecd), d.itnm, d.uomcd, nvl(d.hsnsaccd,f.hsnsaccd), d.pcsperbox, d.pcsperset, ";
                sql += "a.nos, a.qnty, a.rate, a.amt, a.scmdiscamt, a.discamt, a.agdocno, to_char(a.agdocdt, 'dd/mm/yyyy'), ";
                sql += "nvl(a.scmdiscrate,0), a.scmdisctype, nvl(a.discrate,0), a.disctype, nvl(a.tddiscrate,0), a.tddisctype, ";
                sql += "a.igstper, a.cgstper, a.sgstper, a.dutyper, a.cessper ";
                sql += "union all ";
                sql += "select a.autono, nvl(i.translcd,i.crslcd) trslcd, a.autono autoslno, a.slno+2000 slno, '' itcd, '' sizecd, d.amtnm||' '||a.amtdesc itnm, '' uomcd, a.hsncode hsnsaccd,  0 pcsperbox, 0 pcsperset, ";
                sql += "0 nos,0 qnty, 0 rate, decode(d.addless,'L',a.amt*-1,a.amt) itemval, decode(d.addless,'L',a.amt*-1,a.amt) amt, 0 scmdiscrate, '' scmdisctype, 0 scmdiscamt, 0 discrate, '' disctype, 0 discamt, 0 tddiscrate, '' tddisctype, 0 tddiscamt, ";
                sql += "'' agdocno, '' agdocdt, ";
                sql += "a.igstper, a.igstamt, a.cgstper, a.cgstamt, a.sgstper, a.sgstamt, a.dutyper, a.dutyamt, a.cessper, a.cessamt  ";
                sql += "from " + Scm1 + ".t_txnamt a, " + Scm1 + ".t_txn b, " + Scm1 + ".t_cntrl_hdr c, " + Scm1 + ".m_amttype d, " + Scm1 + ".t_txntrans i ";
                sql += "where a.autono=b.autono and a.autono=c.autono and a.amtcd=d.amtcd(+) and a.autono=i.autono(+) and ";
                sql += sqlc;
                sql += ") a, ";

                sql += "(select a.autono||a.slno autoslno, a.stktype ";
                sql += "from " + Scm1 + ".t_txndtl a ) y, ";

                sql += Scm1 + ".t_txn b, " + Scm1 + ".t_txntrans c, " + Scm1 + ".t_txnoth d, " + Scmf + ".m_subleg e, " + Scmf + ".m_subleg f, " + Scmf + ".m_subleg g, " + Scm1 + ".t_cntrl_hdr h, ";
                sql += Scmf + ".m_uom i, " + Scm1 + ".m_godown k, " + Scmf + ".m_subleg m, " + Scm1 + ".m_sitem n, " + Scm1 + ".m_size o ";
                sql += "where a.autono=b.autono and a.autono=c.autono(+) and a.autono=d.autono(+) and b.slcd=e.slcd and nvl(b.conslcd,b.slcd)=f.slcd(+) and a.trslcd=g.slcd(+) and a.autono=h.autono and ";
                sql += "a.uomcd=i.uomcd(+) and b.gocd=k.gocd(+) and ";
                sql += "d.agslcd=m.slcd(+) and a.autoslno=y.autoslno(+) and a.itcd=n.itcd(+) and a.sizecd=o.sizecd(+) and ";
                sql += "a.autono not in ( ";
                sql += "select a.autono ";
                sql += "from " + Scm1 + ".t_cntrl_doc_pass a, " + Scm1 + ".t_cntrl_hdr b, " + Scm1 + ".t_cntrl_auth c ";
                sql += "where a.autono=b.autono(+) and a.autono=c.autono(+) and c.autono is null and ";
                sql += "b.doccd='" + doccd + "' ) ";
                sql += "order by docno,autono,slno,itcd,print_seq";
                DataTable tbl = new DataTable();
                tbl = masterHelp.SQLquery(sql);
                if (tbl.Rows.Count == 0) return RedirectToAction("NoRecords", "RPTViewer", new { errmsg = "Records not found !!" });

                DataView dv = new DataView(tbl);
                var tblauto = dv.ToTable(true, "autono");
                string autono = "";

                autono = string.Join(",", (from DataRow dr in tblauto.Rows select "'" + dr["autono"].ToString() + "'").Distinct());
                if (tblauto.Rows.Count > 999) autono = "";

                DataTable rsOrd;
                sql = "";
                sql += "select distinct a.autono, a.ordautono, b.prefno, b.doccd, c.doconlyno, c.docdt, d.prcnm, b.prceffdt ";
                sql += "from " + Scm1 + ".t_txndtl a, " + Scm1 + ".t_sord b, " + Scm1 + ".t_cntrl_hdr c, " + Scmf + ".m_prclst d ";
                sql += "where a.ordautono=b.autono(+) and a.ordautono=c.autono and b.prccd=d.prccd(+) ";
                if (autono != "") sql += "and a.autono in (" + autono + ")";
                rsOrd = masterHelp.SQLquery(sql);

                //DataTable rsPslip;
                //sql = "";
                //sql += "select a.autono, b.doconlyno, b.vchrno ";
                //sql += "from " + Scm1 + ".t_txn_linkno a, " + Scm1 + ".t_cntrl_hdr b ";
                //sql += "where a.linkautono = b.autono(+) ";
                //if (autono != "") sql += "and a.autono in ('" + autono + "')";
                //sql += "order by autono, vchrno ";
                //rsPslip = MasterHelpFa.SQL_query(sql);

                string blterms = "", inspoldesc = "", dealsin = "";
                //sql = "select blterms, inspoldesc, dealsin from " + Scm1 + ".m_mgroup_spl where compcd='" + CommVar.Compcd() + "' ";
                //DataTable rsMgroupSpl = masterHelp.SQLquery(sql);
                //if (rsMgroupSpl.Rows.Count > 0)
                //{
                //    if (rsMgroupSpl.Rows[0]["blterms"].ToString() != "") blterms = rsMgroupSpl.Rows[0]["blterms"].ToString();
                //    inspoldesc = rsMgroupSpl.Rows[0]["inspoldesc"].ToString();
                //    dealsin = rsMgroupSpl.Rows[0]["dealsin"].ToString();
                //}

                #region  Datatabe IR generate
                DataTable IR = new DataTable();

                IR.Columns.Add("autono", typeof(string), "");
                IR.Columns.Add("copymode", typeof(string), "");
                IR.Columns.Add("goadd1", typeof(string), "");
                IR.Columns.Add("goadd2", typeof(string), "");
                IR.Columns.Add("goadd3", typeof(string), "");
                //
                IR.Columns.Add("bslcd", typeof(string), "");
                IR.Columns.Add("partycd", typeof(string), "");
                IR.Columns.Add("BNM", typeof(string), "");
                IR.Columns.Add("badd1", typeof(string), "");
                IR.Columns.Add("badd2", typeof(string), "");
                IR.Columns.Add("badd3", typeof(string), "");
                IR.Columns.Add("badd4", typeof(string), "");
                IR.Columns.Add("badd5", typeof(string), "");
                IR.Columns.Add("badd6", typeof(string), "");
                IR.Columns.Add("badd7", typeof(string), "");
                IR.Columns.Add("badd8", typeof(string), "");
                IR.Columns.Add("badd9", typeof(string), "");
                IR.Columns.Add("badd10", typeof(string), "");
                IR.Columns.Add("docth", typeof(string), "");
                //
                IR.Columns.Add("blno", typeof(string), "");
                IR.Columns.Add("bldt", typeof(string), "");
                IR.Columns.Add("ordrefno", typeof(string), "");
                IR.Columns.Add("ordrefdt", typeof(string), "");
                IR.Columns.Add("casenm", typeof(string), "");
                IR.Columns.Add("lrno", typeof(string), "");
                IR.Columns.Add("lrdt", typeof(string), "");
                IR.Columns.Add("trslnm", typeof(string), "");
                IR.Columns.Add("destn", typeof(string), "");
                IR.Columns.Add("ewaybillno", typeof(string), "");
                IR.Columns.Add("agentnm", typeof(string), "");
                IR.Columns.Add("plistnm", typeof(string), "");
                IR.Columns.Add("pordno", typeof(string), "");
                IR.Columns.Add("delvmode", typeof(string), "");
                IR.Columns.Add("delvtypedsc", typeof(string), "");
                //
                IR.Columns.Add("bltophead", typeof(string), "");
                IR.Columns.Add("slno", typeof(double), "");
                IR.Columns.Add("itnm", typeof(string), "");
                IR.Columns.Add("styleno", typeof(string), "");
                IR.Columns.Add("pcsperbox", typeof(double), "");
                IR.Columns.Add("sizedsp", typeof(string), "");
                IR.Columns.Add("boxdsp", typeof(string), "");
                IR.Columns.Add("hsnsaccd", typeof(string), "");
                IR.Columns.Add("gstper", typeof(double), "");
                IR.Columns.Add("qnty", typeof(double), "");
                IR.Columns.Add("rate", typeof(string), "");
                IR.Columns.Add("amt", typeof(double), "");
                IR.Columns.Add("dtldsc", typeof(string), "");
                IR.Columns.Add("dtlamt", typeof(string), "");
                IR.Columns.Add("tcsper", typeof(double), "");
                IR.Columns.Add("tcsamt", typeof(double), "");
                IR.Columns.Add("roamt", typeof(double), "");
                IR.Columns.Add("blamt", typeof(double), "");
                IR.Columns.Add("amtinword", typeof(string), "");
                //
                IR.Columns.Add("hsn_cd", typeof(string), "");
                IR.Columns.Add("hsn_qnty", typeof(string), "");
                IR.Columns.Add("hsn_hddsp1", typeof(string), "");
                IR.Columns.Add("hsn_hddsp2", typeof(string), "");
                IR.Columns.Add("hsn_txblval", typeof(string), "");
                IR.Columns.Add("hsn_gstper1", typeof(string), "");
                IR.Columns.Add("hsn_gstamt1", typeof(string), "");
                IR.Columns.Add("hsn_gstper2", typeof(string), "");
                IR.Columns.Add("hsn_gstamt2", typeof(string), "");
                IR.Columns.Add("hsn_gstper3", typeof(string), "");
                IR.Columns.Add("hsn_gstamt3", typeof(string), "");
                IR.Columns.Add("hsn_cessamt", typeof(string), "");
                IR.Columns.Add("hsn_gstamt", typeof(string), "");
                IR.Columns.Add("hsn_tqnty", typeof(string), "");
                IR.Columns.Add("hsn_ttxblval", typeof(string), "");
                IR.Columns.Add("hsn_tgstamt1", typeof(string), "");
                IR.Columns.Add("hsn_tgstamt2", typeof(string), "");
                IR.Columns.Add("hsn_tgstamt3", typeof(string), "");
                //
                IR.Columns.Add("cancel", typeof(string), "");
                IR.Columns.Add("caltype", typeof(double), "");
                IR.Columns.Add("qdecimal", typeof(double), "");
                IR.Columns.Add("plsupply", typeof(string), "");
                IR.Columns.Add("itdesc", typeof(string), "");
                IR.Columns.Add("cstatenm", typeof(string), "");
                IR.Columns.Add("basicamt", typeof(double), "");
                //
                IR.Columns.Add("nos", typeof(double), "");
                IR.Columns.Add("basamt", typeof(double), "");
                IR.Columns.Add("scmdiscamt", typeof(double), "");
                IR.Columns.Add("discamt", typeof(double), "");
                IR.Columns.Add("taxableval", typeof(string), "");
                IR.Columns.Add("cgstamt", typeof(double), "");
                IR.Columns.Add("sgstamt", typeof(double), "");
                IR.Columns.Add("netamt", typeof(double), "");
                IR.Columns.Add("cessamt", typeof(double), "");
                IR.Columns.Add("docno", typeof(string), "");

                IR.Columns.Add("cashdisc", typeof(string), "");
                IR.Columns.Add("cashdiscdt", typeof(string), "");
                IR.Columns.Add("totboxes", typeof(string), "");
                //end

                //extra
                IR.Columns.Add("uomnm", typeof(string), "");//
                IR.Columns.Add("recotype", typeof(string), "");
                IR.Columns.Add("regemailid", typeof(string), "");
                IR.Columns.Add("agregemailid", typeof(string), "");

                IR.Columns.Add("docdt", typeof(string), "");
                IR.Columns.Add("areacd", typeof(string), "");
                IR.Columns.Add("invisstime", typeof(double), "");
                IR.Columns.Add("duedays", typeof(double), "");
                IR.Columns.Add("itmprccd", typeof(string), "");
                IR.Columns.Add("itmprcdesc", typeof(string), "");
                IR.Columns.Add("prceffdt", typeof(string), "");
                IR.Columns.Add("stkprcdesc", typeof(string), "");
                IR.Columns.Add("gocd", typeof(string), "");
                IR.Columns.Add("gonm", typeof(string), "");
                IR.Columns.Add("weekno", typeof(double), "");
                IR.Columns.Add("slcd", typeof(string), "");
                IR.Columns.Add("slnm", typeof(string), "");
                IR.Columns.Add("sladd1", typeof(string), "");
                IR.Columns.Add("sladd2", typeof(string), "");
                IR.Columns.Add("sladd3", typeof(string), "");
                IR.Columns.Add("sladd4", typeof(string), "");
                IR.Columns.Add("sladd5", typeof(string), "");
                IR.Columns.Add("sladd6", typeof(string), "");
                IR.Columns.Add("sladd7", typeof(string), "");
                IR.Columns.Add("sladd8", typeof(string), "");
                IR.Columns.Add("sladd9", typeof(string), "");
                IR.Columns.Add("sladd10", typeof(string), "");
                IR.Columns.Add("cslcd", typeof(string), "");
                IR.Columns.Add("cpartycd", typeof(string), "");
                IR.Columns.Add("cslnm", typeof(string), "");
                IR.Columns.Add("csladd1", typeof(string), "");
                IR.Columns.Add("csladd2", typeof(string), "");
                IR.Columns.Add("csladd3", typeof(string), "");
                IR.Columns.Add("csladd4", typeof(string), "");
                IR.Columns.Add("csladd5", typeof(string), "");
                IR.Columns.Add("csladd6", typeof(string), "");
                IR.Columns.Add("csladd7", typeof(string), "");
                IR.Columns.Add("csladd8", typeof(string), "");
                IR.Columns.Add("csladd9", typeof(string), "");
                IR.Columns.Add("csladd10", typeof(string), "");
                IR.Columns.Add("trslcd", typeof(string), "");
                IR.Columns.Add("trgst", typeof(string), "");
                IR.Columns.Add("lorryno", typeof(string), "");
                IR.Columns.Add("grwt", typeof(double), "");
                IR.Columns.Add("ntwt", typeof(double), "");
                IR.Columns.Add("itcd", typeof(string), "");
                IR.Columns.Add("itrem", typeof(string), "");
                IR.Columns.Add("rateuomnm", typeof(string), "");
                IR.Columns.Add("cgstdsp", typeof(string), "");
                IR.Columns.Add("cgstper", typeof(double), "");
                IR.Columns.Add("sgstper", typeof(double), "");
                IR.Columns.Add("cessper", typeof(double), "");
                IR.Columns.Add("discper", typeof(double), "");
                IR.Columns.Add("revchrg", typeof(string), "");
                IR.Columns.Add("blremarks", typeof(string), "");
                IR.Columns.Add("agstdocno", typeof(string), "");
                IR.Columns.Add("agstdocdt", typeof(string), "");
                IR.Columns.Add("user_id", typeof(string), "");
                IR.Columns.Add("canc_rem", typeof(string), "");
                IR.Columns.Add("nopkgs", typeof(string), "");
                IR.Columns.Add("transgst", typeof(string), "");
                IR.Columns.Add("trsladd1", typeof(string), "");
                IR.Columns.Add("trsladd2", typeof(string), "");
                IR.Columns.Add("trsladd3", typeof(string), "");
                IR.Columns.Add("trsladd4", typeof(string), "");
                IR.Columns.Add("payterms", typeof(string), "");
                IR.Columns.Add("bankactno", typeof(string), "");
                IR.Columns.Add("bankname", typeof(string), "");
                IR.Columns.Add("bankbranch", typeof(string), "");
                IR.Columns.Add("bankifsc", typeof(string), "");
                IR.Columns.Add("bankadd", typeof(string), "");
                IR.Columns.Add("bankrtgs", typeof(string), "");
                IR.Columns.Add("duedt", typeof(string), "");
                IR.Columns.Add("mrp", typeof(double), "");
                IR.Columns.Add("poslno", typeof(string), "");
                IR.Columns.Add("insudesc", typeof(string), "");
                IR.Columns.Add("dealsin", typeof(string), "");
                IR.Columns.Add("blterms", typeof(string), "");
                IR.Columns.Add("COMPWEB", typeof(string), "");

                #endregion

                string bankname = "", bankactno = "", bankbranch = "", bankifsc = "", bankadd = "", bankrtgs = "";
                sql = "";
                sql += "select a.bankname, a.bankactno, a.ifsccode, a.address, a.branch ";
                sql += "from " + Scmf + ".m_loca_ifsc a ";
                sql += "where a.compcd = '" + COM + "' and a.loccd = '" + LOC + "' and a.defltbank = 'T' ";
                DataTable rsbank = masterHelp.SQLquery(sql);
                if (rsbank.Rows.Count > 0)
                {
                    bankrtgs += "You can Make RTGS/NEFT to " + rsbank.Rows[0]["bankname"] + " ( IFSC-" + rsbank.Rows[0]["ifsccode"] + " ) A/c No-" + rsbank.Rows[0]["bankactno"];
                    if (rsbank.Rows[0]["address"].ToString() != "") bankrtgs += " Address - " + rsbank.Rows[0]["address"];
                    bankrtgs += ".";

                    bankname = rsbank.Rows[0]["bankname"].ToString();
                    bankactno = rsbank.Rows[0]["bankactno"].ToString();
                    bankifsc = rsbank.Rows[0]["ifsccode"].ToString();
                    bankbranch = rsbank.Rows[0]["branch"].ToString();
                    bankadd = rsbank.Rows[0]["address"].ToString();
                }

                int maxR = tbl.Rows.Count - 1;
                Int32 i = 0; int istore = 0; int lslno = 0; int ilast = 0;
                string auto1 = ""; string copymode = ""; string blrem = ""; string itdsc = "";
                string blhead = ""; string fssailicno = ""; string grpemailid = ""; string goadd = "", gocd = "";
                string rupinwords = "";
                int uomdecimal = 3; int uommaxdecimal = 0;

                switch (tbl.Rows[0]["doctag"].ToString())
                {
                    case "SB":
                        blhead = "TAX INVOICE"; break;
                    case "SR":
                        blhead = "CREDIT NOTE"; break;
                    case "PR":
                        blhead = "DEBIT NOTE"; break;
                    case "PI":
                        blhead = "PROFORMA INVOICE"; break;
                    case "CI":
                        blhead = "TAX INVOICE"; break;
                    case "PB":
                        blhead = "PURCHASE INVOICE"; break;
                    default: blhead = ""; break;
                }

                Int16 maxCopy = 5;

                while (i <= maxR)
                {
                    fssailicno = tbl.Rows[i]["fssailicno"].ToString();
                    //grpemailid = tbl.Rows[i]["grpemailid"].ToString();
                    gocd = tbl.Rows[i]["gocd"].ToString();
                    goadd = tbl.Rows[i]["goadd1"].ToString() + " " + tbl.Rows[i]["goadd2"].ToString() + " " + tbl.Rows[i]["goadd3"].ToString();
                    if (tbl.Rows[i]["gophno"].ToString() != "") goadd = goadd + " Phone : " + tbl.Rows[i]["gophno"].ToString();
                    istore = i;
                    for (int ic = 0; ic <= maxCopy; ic++)
                    {
                        i = istore;
                        lslno = 0;
                        auto1 = tbl.Rows[i]["autono"].ToString();
                        double dbasamt = 0; double ddisc1 = 0; double ddisc2 = 0; double dtxblval = 0;
                        double dcgstamt = 0; double dsgstamt = 0; double dnetamt = 0; double dnos = 0; double dqnty = 0;
                        bool doctotprint = false; bool totalreadyprint = false; bool delvchrg = false;

                        //rupinwords = Cn.AmountInWords(tbl.Rows[i]["blamt"].ToString());

                        string dtldsc = "", dtlamt = "";
                        double tqnty = 0, tamt = 0, tgst = 0, blamt = 0, totalosamt = 0;
                        string hsnqnty = "", hsntaxblval = "", hsngstper1 = "", hsngstper2 = "", hsngstper3 = "", hsngstamt1 = "", hsngstamt2 = "", hsngstamt3 = "", hsncode = "";
                        double gstper1 = 0, gstamt1 = 0, total_qnty = 0, total_taxval = 0, total_gstamt1 = 0, total_gstamt2 = 0, total_gstamt3 = 0;
                        bool flagi = false, flagc = false, flags = false;
                        string ordno = "", orddt = "", pordno = "", prclst = "", casenos = "";
                        double noofcases = 0, itemval = 0, totboxes = 0, totsets = 0;
                        int termslno = 0; double cashdisc = 0; string cashdiscdt = "";

                        if (copyno[ic].ToString() != "N")
                        {
                            rupinwords = Cn.AmountInWords(tbl.Rows[i]["blamt"].ToString());
                            Int32 m = tbl.Rows.Count - 1;

                            var TOT_AMT = (from DataRow DRR in tbl.Rows
                                           where DRR["autono"].ToString() == auto1
                                           select new
                                           {
                                               AMT = DRR["itemval"] == null ? 0 : Convert.ToDouble(DRR["itemval"].ToString())
                                           }).Sum(A => A.AMT);
                            if (TOT_AMT != null) itemval = Convert.ToDouble(TOT_AMT);

                            string oslcd = "", oglcd = "", odocdt = "", oclass1cd = "";

                            string sel1 = "autono = '" + auto1 + "' ";

                            //DataTable orddata = rsOrd.Select(sel1).Distinct().CopyToDataTable();

                            DataTable orddata = new DataTable();
                            var rows1 = rsOrd.AsEnumerable()
                                .Where(x => ((string)x["autono"]) == auto1);
                            if (rows1.Any())
                            {
                                orddata = rows1.CopyToDataTable();
                                ordno = string.Join(",", (from DataRow dr in orddata.Rows select dr["doconlyno"].ToString()).Distinct());
                                orddt = orddata.Rows[0]["docdt"].ToString().retDateStr();
                                pordno = orddata.Rows[0]["prefno"].ToString();
                                prclst = orddata.Rows[0]["prcnm"].ToString(); // + " Dtd. " + orddata.Rows[0]["prceffdt"].ToString().retDateStr();
                            }

                            //string lastdocno = "";
                            //DataTable pslipdata = rsPslip.Select(sel1).CopyToDataTable();
                            //if (pslipdata != null)
                            //{
                            //    casenos = "";
                            //    casenos += pslipdata.Rows[0]["doconlyno"].ToString();
                            //    double startno = 0, checkno=0;
                            //    startno = Convert.ToDouble(pslipdata.Rows[0]["vchrno"]);
                            //    checkno = startno;
                            //    for (int x = 0; x <= pslipdata.Rows.Count-1; x++)
                            //    {
                            //        startno = Convert.ToDouble(pslipdata.Rows[x]["vchrno"]);
                            //        if (startno != checkno)
                            //        {
                            //            casenos += "-" + pslipdata.Rows[x]["doconlyno"].ToString();
                            //            checkno = Convert.ToDouble(pslipdata.Rows[x]["vchrno"]);
                            //            casenos = casenos + "," + pslipdata.Rows[x]["doconlyno"].ToString(); 
                            //        }
                            //        lastdocno = pslipdata.Rows[x]["doconlyno"].ToString();
                            //        checkno++;
                            //        noofcases++;
                            //    }
                            //    casenos += "-" + lastdocno;
                            //}
                            casenos = tbl.Rows[i]["casenos"].ToString();
                            noofcases = Convert.ToDouble(tbl.Rows[i]["noofcases"]);
                            if (noofcases != 0) casenos += " (" + noofcases.ToString() + ")";

                            //if (doctype == "SBILL")
                            //{
                            //    oslcd = ""; // tbl.Rows[i]["oslcd"].ToString();
                            //    oglcd = ""; // tbl.Rows[i]["debglcd"].ToString();
                            //    odocdt = Convert.ToDateTime(tbl.Rows[i]["docdt"].ToString()).AddDays(-1).ToString().retDateStr();
                            //    totalosamt = Convert.ToDouble(MasterHelpFa.slcdbal(oslcd, oglcd, odocdt, oclass1cd));

                            //    sql = "";
                            //    sql += "select sum(a.blamt) blamt from ( ";
                            //    sql += "select nvl(b.pslcd,a.slcd) oslcd, sum(a.blamt) blamt ";
                            //    sql += "from " + Scm1 + ".t_txn a, " + Scmf + ".m_subleg b, " + Scm1 + ".t_cntrl_hdr c, " + Scm1 + ".m_doctype d ";
                            //    sql += "where a.autono=c.autono and c.doccd=d.doccd and a.slcd=b.slcd and nvl(c.cancel,'N')='N' and c.compcd='" + COM + "' and ";
                            //    sql += "c.docdt=to_date('" + tbl.Rows[i]["docdt"].ToString().retDateStr() + "','dd/mm/yyyy') and ";
                            //    sql += "d.doctype='SBILL' and c.vchrno <= " + Convert.ToDouble(tbl.Rows[i]["vchrno"]) + " and c.doccd='" + doccd + "' ";
                            //    sql += "group by nvl(b.pslcd,a.slcd) ) a ";
                            //    rsTmp = MasterHelpFa.SQL_query(sql);
                            //    if (rsTmp.Rows.Count > 0) totalosamt = totalosamt + Convert.ToDouble(rsTmp.Rows[0]["blamt"]);
                            //}

                            // Disc data into row data
                            double _txbl = 0;
                            Type D_1 = tbl.Rows[0]["scmdiscamt"].GetType(); Type D_2 = tbl.Rows[0]["discamt"].GetType(); Type D_3 = tbl.Rows[0]["tddiscamt"].GetType();
                            Type D_T = tbl.Rows[0]["itemval"].GetType();
                            var DISC_DATA = (from DataRow DR in tbl.Rows
                                             where DR["autono"].ToString() == auto1 && Convert.ToDouble(DR["slno"]) < 2000
                                             group DR by new { SCMTYPE = DR["scmdisctype"].ToString(), SCMPER = DR["scmdiscrate"].ToString(), DISCTYPE = DR["disctype"].ToString(), DISCPER = DR["discrate"].ToString(), TDDISCTYPE = DR["tddisctype"].ToString(), TDDISCPER = DR["tddiscrate"].ToString() } into X
                                             select new
                                             {
                                                 SCMTYPE = X.Key.SCMTYPE,
                                                 SCMPER = X.Key.SCMPER,
                                                 DISCTYPE = X.Key.DISCTYPE,
                                                 DISCPER = X.Key.DISCPER,
                                                 TDDISCTYPE = X.Key.TDDISCTYPE,
                                                 TDDISCPER = X.Key.TDDISCPER,
                                                 SCMAMT = D_1.Name == "Double" ? X.Sum(Z => Z.Field<double>("scmdiscamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("scmdiscamt"))),
                                                 DISCAMT = D_2.Name == "Double" ? X.Sum(Z => Z.Field<double>("discamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("discamt"))),
                                                 TDDISCAMT = D_3.Name == "Double" ? X.Sum(Z => Z.Field<double>("tddiscamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("tddiscamt"))),
                                                 itemval = D_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("itemval")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("itemval")))
                                             }).ToList();

                            if (DISC_DATA != null && DISC_DATA.Count > 0)
                            {
                                foreach (var k in DISC_DATA)
                                {
                                    if (k.TDDISCAMT != 0) { dtldsc += "(-) Trade Discount " + retDiscType(k.TDDISCTYPE, Convert.ToDouble(k.TDDISCPER)) + "~"; dtlamt += Convert.ToDouble(k.TDDISCAMT).ToINRFormat() + "~"; }
                                    if (k.DISCAMT != 0) { dtldsc += "(-) Discount " + retDiscType(k.DISCTYPE, Convert.ToDouble(k.DISCPER)) + "~"; dtlamt += Convert.ToDouble(k.DISCAMT).ToINRFormat() + "~"; }
                                    if (k.SCMAMT != 0) { dtldsc += "(-) Spl.Disc " + retDiscType(k.SCMTYPE, Convert.ToDouble(k.SCMPER)) + "~"; dtlamt += Convert.ToDouble(k.SCMAMT).ToINRFormat() + "~"; }
                                    _txbl = _txbl + Convert.ToDouble(k.itemval);
                                }
                            }
                            cashdisc = Math.Round(_txbl * .03, 0, MidpointRounding.AwayFromZero);
                            var AMT_DATA = (from DataRow DR in tbl.Rows
                                            where DR["autono"].ToString() == auto1 && Convert.ToDouble(DR["slno"]) > 2000
                                            group DR by new { ITNM = DR["itnm"].ToString() } into X
                                            select new
                                            {
                                                ITNM = X.Key.ITNM,
                                                itemval = D_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("itemval")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("itemval")))
                                            }).ToList();
                            if (AMT_DATA != null && AMT_DATA.Count > 0)
                            {
                                foreach (var k in AMT_DATA)
                                {
                                    if (k.itemval != 0) { dtldsc += "(+) " + k.ITNM + "~"; dtlamt += Convert.ToDouble(k.itemval).ToINRFormat() + "~"; }
                                    _txbl = _txbl + Convert.ToDouble(k.itemval);
                                }
                            }
                            dtldsc += "Taxable Amount~"; dtlamt += _txbl.ToINRFormat() + "~";
                            //
                            Type A_T = tbl.Rows[0]["basamt"].GetType(); Type Q_T = tbl.Rows[0]["qnty"].GetType(); Type I_T = tbl.Rows[0]["igstamt"].GetType();
                            Type C_T = tbl.Rows[0]["cgstamt"].GetType(); Type S_T = tbl.Rows[0]["sgstamt"].GetType();

                            var GST_DATA = (from DataRow DR in tbl.Rows
                                            where DR["autono"].ToString() == auto1
                                            group DR by new { IGST = DR["igstper"].ToString(), CGST = DR["cgstper"].ToString(), SGST = DR["sgstper"].ToString() } into X
                                            select new
                                            {
                                                IGSTPER = X.Key.IGST,
                                                CGSTPER = X.Key.CGST,
                                                SGSTPER = X.Key.SGST,
                                                TAMT = A_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("basamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("basamt"))),
                                                TQNTY = Q_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("qnty")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("qnty"))),
                                                IGSTAMT = I_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("igstamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("igstamt"))),
                                                CGSTAMT = C_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("cgstamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("cgstamt"))),
                                                SGSTAMT = S_T.Name == "Double" ? X.Sum(Z => Z.Field<double>("sgstamt")) : Convert.ToDouble(X.Sum(Z => Z.Field<decimal>("sgstamt"))),
                                                TOTALPER = Convert.ToDouble(X.Key.IGST) + Convert.ToDouble(X.Key.CGST) + Convert.ToDouble(X.Key.SGST)
                                            }).OrderBy(A => A.TOTALPER).ToList();

                            if (GST_DATA != null && GST_DATA.Count > 0)
                            {
                                foreach (var k in GST_DATA)
                                {
                                    if (k.IGSTAMT != 0) { dtldsc += "(+) IGST @ " + Cn.Indian_Number_format(k.IGSTPER, "0.00") + " %~"; dtlamt += Convert.ToDouble(k.IGSTAMT).ToINRFormat() + "~"; }
                                    if (k.CGSTAMT != 0) { dtldsc += "(+) CGST @ " + Cn.Indian_Number_format(k.CGSTPER, "0.00") + " %~"; dtlamt += Convert.ToDouble(k.CGSTAMT).ToINRFormat() + "~"; }
                                    if (k.SGSTAMT != 0) { dtldsc += "(+) SGST @ " + Cn.Indian_Number_format(k.SGSTPER, "0.00") + " %~"; dtlamt += Convert.ToDouble(k.SGSTAMT).ToINRFormat() + "~"; }
                                    tqnty = tqnty + Convert.ToDouble(k.TQNTY);
                                    tamt = tamt + Convert.ToDouble(k.TAMT);
                                    tgst = tgst + Convert.ToDouble(k.IGSTAMT) + Convert.ToDouble(k.CGSTAMT) + Convert.ToDouble(k.SGSTAMT);
                                }
                            }

                            var HSN_DATA = (from a in DBF.T_VCH_GST
                                            where a.AUTONO == auto1
                                            group a by new { HSNCODE = a.HSNCODE, IGSTPER = a.IGSTPER, CGSTPER = a.CGSTPER, SGSTPER = a.SGSTPER } into x
                                            select new
                                            {
                                                HSNCODE = x.Key.HSNCODE,
                                                IGSTPER = x.Key.IGSTPER,
                                                CGSTPER = x.Key.CGSTPER,
                                                SGSTPER = x.Key.SGSTPER,
                                                TIGSTAMT = x.Sum(s => s.IGSTAMT),
                                                TCGSTAMT = x.Sum(s => s.CGSTAMT),
                                                TSGSTAMT = x.Sum(s => s.SGSTAMT),
                                                TAMT = x.Sum(s => s.AMT),
                                                TQNTY = x.Sum(s => s.QNTY),
                                                //DECIMAL = (from z in DBF.M_UOM
                                                //           where z.UOMCD == (from y in DBF.T_VCH_GST where y.AUTONO == auto1 select y.UOM).FirstOrDefault()
                                                //           select z.DECIMALS).FirstOrDefault()
                                                //DECIMALS = (from c in DBF.M_UOM where c.UOMCD ==  select c.DECIMALS)
                                            }).ToList();

                            if (HSN_DATA != null && HSN_DATA.Count > 0)
                            {
                                foreach (var k in HSN_DATA)
                                {
                                    var uom = (from a in DBF.T_VCH_GST
                                               where a.AUTONO == auto1 && a.IGSTPER == k.IGSTPER && a.CGSTPER == k.CGSTPER
                                      && a.SGSTPER == k.SGSTPER && a.HSNCODE == k.HSNCODE
                                               select a.UOM).FirstOrDefault();
                                    double DECIMAL = 0; string umnm = "";
                                    var uomdata = DBF.M_UOM.Find(uom);
                                    DECIMAL = Convert.ToDouble(uomdata.DECIMALS);
                                    umnm = uomdata.UOMNM;
                                    if (k.TIGSTAMT > 0) flagi = true;
                                    if (k.TCGSTAMT > 0) flagc = true;

                                    gstper1 = Convert.ToDouble(k.CGSTPER) + Convert.ToDouble(k.IGSTPER);
                                    gstamt1 = Convert.ToDouble(k.TCGSTAMT) + Convert.ToDouble(k.TIGSTAMT);

                                    if (k.HSNCODE != null) { hsncode += k.HSNCODE + "~"; }
                                    if (k.TQNTY != 0) { hsnqnty += Convert.ToDouble(k.TQNTY).ToString("n" + DECIMAL.ToString()) + " " + umnm + "~"; }
                                    if (k.TCGSTAMT + k.TIGSTAMT != 0)
                                    {
                                        hsngstper1 += Cn.Indian_Number_format(k.IGSTPER.ToString(), "0.00") + " %~";
                                        hsngstamt1 += Convert.ToDouble(k.TIGSTAMT).ToINRFormat() + "~";
                                    }
                                    if (k.TCGSTAMT + k.TCGSTAMT != 0)
                                    {
                                        hsngstper2 += Cn.Indian_Number_format(k.CGSTPER.ToString(), "0.00") + " %~";
                                        hsngstamt2 += Convert.ToDouble(k.TCGSTAMT).ToINRFormat() + "~";
                                    }
                                    if (k.TSGSTAMT != 0)
                                    {
                                        flags = true;
                                        hsngstper3 += Cn.Indian_Number_format(k.SGSTPER.ToString(), "0.00") + " %~";
                                        hsngstamt3 += Convert.ToDouble(k.TSGSTAMT).ToINRFormat() + "~";
                                    }
                                    if (k.TAMT != 0) { hsntaxblval += Convert.ToDouble(k.TAMT).ToINRFormat() + "~"; }

                                    total_qnty = total_qnty + Convert.ToDouble(k.TQNTY);
                                    total_taxval = total_taxval + Convert.ToDouble(k.TAMT);
                                    total_gstamt1 = total_gstamt1 + Convert.ToDouble(k.TIGSTAMT);
                                    total_gstamt2 = total_gstamt2 + Convert.ToDouble(k.TCGSTAMT);
                                    total_gstamt3 = total_gstamt3 + Convert.ToDouble(k.TSGSTAMT);
                                }
                            }

                            //blterms intializes
                            cashdiscdt = Convert.ToDateTime(tbl.Rows[i]["docdt"].ToString()).AddDays(30).ToString().retDateStr();

                            blterms = "";
                            termslno++; blterms += termslno.ToString() + ".Please pay by A/c Payee Draft only payable at Kolkata.~";
                            termslno++; blterms += termslno.ToString() + ".The Company will not be responsible for any Damage,Shortage, Pilferage etc in Transit.~";
                            termslno++; blterms += termslno.ToString() + ".All Subject to Kolkata Jurisdiction only.~";
                            if (VE.MENU_PARA == "SOTH")
                            {
                                if (inttermsprint == true) { termslno++; blterms += termslno.ToString() + ".Interest will be charged @ 24% if not paid within due date.~"; }
                            }
                            else
                            {
                                if (inttermsprint == true) { termslno++; blterms += termslno.ToString() + ".Interest will be charged @ 24% if not paid within 60 days from LR date.~"; }
                                if (cashdiscprint == true) { termslno++; blterms += termslno.ToString() + ".Cash Disc of Rs." + cashdisc.ToINRFormat() + "/ -will be allowed if paid within " + cashdiscdt + ", Claimed by raising debit note on us."; }
                            }
                            //
                        }

                        while (tbl.Rows[i]["autono"].ToString() == auto1)
                        {
                            if (copyno[ic].ToString() == "N")
                            {
                                i = i + 1;
                                break;
                            }
                            switch (ic)
                            {
                                case 0:
                                    copymode = "ORIGINAL FOR RECIPIENT"; break;
                                case 1:
                                    copymode = "DUPLICATE FOR TRANSPORTER"; break;
                                case 2:
                                    copymode = "TRIPLICATE FOR SUPPLIER"; break;
                                case 3:
                                    copymode = "EXTRA COPY"; break;
                                case 4:
                                    copymode = "EXTRA COPY"; break;
                                case 5:
                                    copymode = "EXTRA COPY"; break;
                                default: copymode = ""; break;
                            }

                            if (Convert.ToDouble(tbl.Rows[i]["slno"]) < 2000)
                            {
                                DataRow dr1 = IR.NewRow();
                                docstart:

                                double duedays = 0;
                                string payterms = "";
                                duedays = tbl.Rows[i]["duedays"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["duedays"]);
                                payterms = tbl.Rows[i]["payterms"].ToString();
                                if (payterms == "")
                                {
                                    if (duedays == 0) payterms = ""; else payterms = duedays.ToString() + " days.";
                                }

                                dr1["autono"] = auto1 + ic.ToString();
                                dr1["plistnm"] = prclst;
                                dr1["casenm"] = casenos;
                                dr1["nopkgs"] = casenos;
                                dr1["pordno"] = pordno;
                                dr1["ordrefno"] = ordno;
                                dr1["ordrefdt"] = orddt;
                                dr1["cstatenm"] = tbl.Rows[i]["cstate"].ToString();
                                dr1["docno"] = tbl.Rows[i]["docno"].ToString();
                                dr1["docdt"] = tbl.Rows[i]["docdt"] == DBNull.Value ? "" : tbl.Rows[i]["docdt"].ToString().Substring(0, 10).ToString();
                                dr1["goadd2"] = tbl.Rows[i]["goadd2"].ToString();
                                dr1["goadd3"] = tbl.Rows[i]["goadd3"].ToString();
                                dr1["delvmode"] = "";
                                dr1["hsn_cd"] = hsncode;
                                dr1["hsn_qnty"] = hsnqnty;
                                dr1["hsn_hddsp1"] = "";
                                dr1["hsn_hddsp2"] = "";
                                dr1["hsn_txblval"] = hsntaxblval;
                                dr1["hsn_gstper1"] = hsngstper1;
                                dr1["hsn_gstamt1"] = hsngstamt1;
                                dr1["hsn_gstper2"] = hsngstper2;
                                dr1["hsn_gstamt2"] = hsngstamt2;
                                dr1["hsn_gstper3"] = hsngstper3;
                                dr1["hsn_gstamt3"] = hsngstamt3;
                                dr1["hsn_cessamt"] = "";
                                dr1["hsn_gstamt"] = "";
                                dr1["hsn_tqnty"] = total_qnty;
                                dr1["hsn_ttxblval"] = total_taxval.ToINRFormat();
                                if (total_gstamt1 != 0) dr1["hsn_tgstamt1"] = total_gstamt1.ToINRFormat();
                                if (total_gstamt2 != 0) dr1["hsn_tgstamt2"] = total_gstamt2.ToINRFormat();
                                if (total_gstamt3 != 0) dr1["hsn_tgstamt3"] = total_gstamt3.ToINRFormat();
                                dr1["cancel"] = tbl.Rows[i]["cancel"].ToString();
                                dr1["copymode"] = copymode;
                                dr1["gocd"] = tbl.Rows[i]["gocd"].ToString();
                                dr1["gonm"] = tbl.Rows[i]["gonm"].ToString();
                                dr1["goadd1"] = tbl.Rows[i]["goadd1"].ToString();
                                dr1["goadd2"] = tbl.Rows[i]["goadd2"].ToString();
                                dr1["goadd3"] = tbl.Rows[i]["goadd3"].ToString()+" Ph. "+tbl.Rows[i]["gophno"].ToString();
                                dr1["bslcd"] = tbl.Rows[i]["slcd"].ToString();
                                dr1["partycd"] = "";
                                dr1["BNM"] = tbl.Rows[i]["slnm"].ToString();
                                dr1["slnm"] = tbl.Rows[i]["slnm"].ToString();
                                dr1["lrno"] = tbl.Rows[i]["lrno"].ToString();
                                dr1["lrdt"] = tbl.Rows[i]["lrdt"] == DBNull.Value ? "" : tbl.Rows[i]["lrdt"].ToString().Substring(0, 10).ToString();
                                dr1["delvtypedsc"] = Salesfunc.retDelvTypeDesc(tbl.Rows[i]["cod"].ToString());
                                dr1["ewaybillno"] = tbl.Rows[i]["ewaybillno"].ToString();
                                dr1["agentnm"] = tbl.Rows[i]["agslnm"].ToString();
                                dr1["roamt"] = tbl.Rows[i]["roamt"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["roamt"]);
                                dr1["tcsper"] = tbl.Rows[i]["tcsper"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["tcsper"]);
                                dr1["tcsamt"] = tbl.Rows[i]["tcsamt"].ToString().retDbl().ToINRFormat(); // == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["tcsamt"]);
                                dr1["blamt"] = tbl.Rows[i]["blamt"].ToString().retDbl().ToINRFormat(); // == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["blamt"]);
                                dr1["dtldsc"] = dtldsc;
                                dr1["dtlamt"] = dtlamt;
                                if (totalreadyprint == false)
                                {
                                    if (tbl.Rows[i]["itcd"].ToString() != "") dr1["caltype"] = 1;
                                }
                                dr1["user_id"] = tbl.Rows[i]["usr_id"].ToString();
                                dr1["canc_rem"] = tbl.Rows[i]["canc_rem"].ToString();
                                //dr1["areacd"] = tbl.Rows[i]["areacd"].ToString();
                                dr1["duedays"] = duedays;
                                dr1["duedt"] = Convert.ToDateTime(tbl.Rows[i]["docdt"].ToString()).AddDays(duedays).ToString().retDateStr();
                                dr1["payterms"] = payterms;
                                dr1["regemailid"] = tbl.Rows[i]["regemailid"].ToString();
                                dr1["agregemailid"] = tbl.Rows[i]["agregemailid"].ToString();
                                string cfld = "", rfld = ""; int rf = 0;
                                for (int f = 1; f <= 6; f++)
                                {
                                    cfld = "sladd" + Convert.ToString(f).ToString();
                                    if (tbl.Rows[i][cfld].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "badd" + Convert.ToString(rf);
                                        dr1[rfld] = tbl.Rows[i][cfld].ToString();
                                    }
                                }
                                rf = rf + 1;
                                rfld = "badd" + Convert.ToString(rf);
                                dr1[rfld] = tbl.Rows[i]["state"].ToString() + " [" + tbl.Rows[i]["statecd"].ToString() + "]";
                                if (tbl.Rows[i]["gstno"].ToString() != "")
                                {
                                    rf = rf + 1;
                                    rfld = "badd" + Convert.ToString(rf);
                                    dr1[rfld] = "GST # " + tbl.Rows[i]["gstno"].ToString();
                                }
                                if (tbl.Rows[i]["panno"].ToString() != "")
                                {
                                    rf = rf + 1;
                                    rfld = "badd" + Convert.ToString(rf);
                                    dr1[rfld] = "PAN # " + tbl.Rows[i]["panno"].ToString();
                                }
                                if (tbl.Rows[i]["regmobile"].ToString() != "")
                                {
                                    rf = rf + 1;
                                    rfld = "badd" + Convert.ToString(rf);
                                    dr1[rfld] = "Ph. # " + tbl.Rows[i]["regmobile"].ToString();
                                }
                                else
                                {
                                    if (tbl.Rows[i]["phno"].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "badd" + Convert.ToString(rf);
                                        dr1[rfld] = "Ph. # " + tbl.Rows[i]["phno"].ToString();
                                    }
                                }
                                // Consignee
                                cfld = ""; rfld = ""; rf = 0;
                                bool conslcdprn = true;
                                if (tbl.Rows[i]["cslcd"].ToString() == tbl.Rows[i]["slcd"].ToString() && tbl.Rows[i]["othadd1"].ToString() != "") conslcdprn = false;

                                if (conslcdprn == true)
                                {
                                    dr1["cslcd"] = tbl.Rows[i]["cslcd"].ToString();
                                    dr1["cpartycd"] = tbl.Rows[i]["cpartycd"].ToString();
                                    dr1["cslnm"] = tbl.Rows[i]["cslnm"].ToString();
                                    for (int f = 1; f <= 6; f++)
                                    {
                                        cfld = "csladd" + Convert.ToString(f).ToString();
                                        if (tbl.Rows[i][cfld].ToString() != "")
                                        {
                                            rf = rf + 1;
                                            rfld = "csladd" + Convert.ToString(rf);
                                            dr1[rfld] = tbl.Rows[i][cfld].ToString();
                                        }
                                    }
                                    rf = rf + 1;
                                    rfld = "csladd" + Convert.ToString(rf);
                                    dr1[rfld] = tbl.Rows[i]["cstate"].ToString() + " [" + tbl.Rows[i]["cstatecd"].ToString() + "]";
                                    if (tbl.Rows[i]["cgstno"].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "csladd" + Convert.ToString(rf);
                                        dr1[rfld] = "GST # " + tbl.Rows[i]["cgstno"].ToString();
                                    }
                                    if (tbl.Rows[i]["cpanno"].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "csladd" + Convert.ToString(rf);
                                        dr1[rfld] = "PAN # " + tbl.Rows[i]["cpanno"].ToString();
                                    }
                                }
                                else if (tbl.Rows[i]["othadd1"].ToString() != "")
                                {
                                    dr1["cslcd"] = tbl.Rows[i]["slcd"].ToString();
                                    dr1["cpartycd"] = ""; // tbl.Rows[i]["partycd"].ToString();
                                    dr1["cslnm"] = tbl.Rows[i]["slnm"].ToString();
                                    for (int f = 1; f <= 3; f++)
                                    {
                                        cfld = "othadd" + Convert.ToString(f).ToString();
                                        if (tbl.Rows[i][cfld].ToString() != "")
                                        {
                                            rf = rf + 1;
                                            rfld = "csladd" + Convert.ToString(rf);
                                            dr1[rfld] = tbl.Rows[i][cfld].ToString();
                                        }
                                    }
                                    rf = rf + 1;
                                    rfld = "csladd" + Convert.ToString(rf);
                                    dr1[rfld] = tbl.Rows[i]["cstate"].ToString() + " [" + tbl.Rows[i]["statecd"].ToString() + "]";
                                    if (tbl.Rows[i]["cgstno"].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "csladd" + Convert.ToString(rf);
                                        dr1[rfld] = "GST # " + tbl.Rows[i]["gstno"].ToString();
                                    }
                                    if (tbl.Rows[i]["cpanno"].ToString() != "")
                                    {
                                        rf = rf + 1;
                                        rfld = "csladd" + Convert.ToString(rf);
                                        dr1[rfld] = "PAN # " + tbl.Rows[i]["panno"].ToString();
                                    }
                                }

                                dr1["trslcd"] = tbl.Rows[i]["trslcd"].ToString();
                                dr1["trslnm"] = tbl.Rows[i]["trslnm"].ToString();
                                dr1["trsladd1"] = tbl.Rows[i]["trsladd1"].ToString();
                                dr1["trsladd2"] = tbl.Rows[i]["trsladd2"].ToString();
                                dr1["trsladd3"] = tbl.Rows[i]["trsladd3"].ToString();
                                dr1["trsladd4"] = tbl.Rows[i]["trslphno"].ToString();
                                dr1["trgst"] = tbl.Rows[i]["trgst"].ToString();
                                dr1["lorryno"] = tbl.Rows[i]["lorryno"].ToString();
                                dr1["grwt"] = tbl.Rows[i]["grwt"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["grwt"]);
                                dr1["ntwt"] = tbl.Rows[i]["ntwt"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["ntwt"]);

                                dr1["revchrg"] = "N";

                                dr1["amtinword"] = rupinwords;
                                blrem = "";
                                if (tbl.Rows[i]["docrem"].ToString() != "") blrem = blrem + tbl.Rows[i]["docrem"].ToString() + "  ";
                                dr1["docth"] = Salesfunc.retDocTh(tbl.Rows[i]["docth"].ToString());
                                dr1["blremarks"] = blrem;

                                //Bank Detals
                                dr1["bankactno"] = bankactno;
                                dr1["bankname"] = bankname;
                                dr1["bankifsc"] = bankifsc;
                                dr1["bankbranch"] = bankbranch;
                                dr1["bankadd"] = bankadd;
                                dr1["bankrtgs"] = bankrtgs;

                                dr1["destn"] = tbl.Rows[i]["destn"];
                                dr1["plsupply"] = tbl.Rows[i]["plsupply"];
                                if (tbl.Rows[i]["insby"].ToString().retStr() == "Y") dr1["insudesc"] = inspoldesc;
                                dr1["dealsin"] = dealsin;
                                dr1["blterms"] = blterms;

                                if (doctotprint == false)
                                {
                                    itdsc = "";
                                    if (tbl.Rows[i]["itcd"].ToString() != "")
                                    {
                                        lslno = lslno + 1;
                                        delvchrg = false;
                                    }
                                    else
                                    {
                                        lslno = 0;
                                        delvchrg = true;
                                    }
                                    //if (tbl.Rows[i]["itrem"].ToString() != "") itdsc = tbl.Rows[i]["itrem"].ToString();

                                    dr1["agstdocno"] = tbl.Rows[i]["agdocno"].ToString();
                                    dr1["agstdocdt"] = tbl.Rows[i]["agdocdt"] == DBNull.Value ? "" : tbl.Rows[i]["agdocdt"].ToString().Substring(0, 10).ToString();

                                    dr1["slno"] = lslno;
                                    dr1["itcd"] = tbl.Rows[i]["itcd"].ToString();
                                    dr1["itnm"] = tbl.Rows[i]["itnm"].ToString();
                                    dr1["styleno"] = tbl.Rows[i]["styleno"];
                                    dr1["itdesc"] = itdsc;
                                    dr1["bltophead"] = "";
                                    double itrate = 0; itrate = tbl.Rows[i]["rate"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["rate"]);
                                    if (itrate == 0) dr1["rate"] = "Free"; dr1["rate"] = itrate;
                                    dr1["hsnsaccd"] = tbl.Rows[i]["hsnsaccd"].ToString();
                                    dr1["pcsperbox"] = tbl.Rows[i]["pcsperbox"] == DBNull.Value?0: Convert.ToDouble(tbl.Rows[i]["pcsperbox"]);
                                    uomdecimal = tbl.Rows[i]["qdecimal"] == DBNull.Value ? 0 : Convert.ToInt16(tbl.Rows[i]["qdecimal"]);
                                    //string dbqtyu = string.Format("{0:N6}", Convert.ToDouble(dr1["qnty"]));
                                    //if (dbqtyu.Substring(dbqtyu.Length - 2, 2) == "00")
                                    //{
                                    //    if (uomdecimal > 4) uomdecimal = 4;
                                    //}
                                    if (uomdecimal > uommaxdecimal) uommaxdecimal = uomdecimal;
                                    dr1["qdecimal"] = uomdecimal;
                                    dr1["uomnm"] = tbl.Rows[i]["uomnm"].ToString();

                                    //string strdsc = "";
                                    //if (Convert.ToDouble(tbl.Rows[i]["igstamt"]) != 0) dr1["cgstdsp"] = "IGST"; else dr1["cgstdsp"] = "CGST";
                                    dr1["gstper"] = Convert.ToDouble(tbl.Rows[i]["gstper"]);
                                    dr1["cgstper"] = Convert.ToDouble(tbl.Rows[i]["cgstper"]) + Convert.ToDouble(tbl.Rows[i]["igstper"]);
                                    dr1["sgstper"] = Convert.ToDouble(tbl.Rows[i]["sgstper"]);
                                    dr1["cessper"] = Convert.ToDouble(tbl.Rows[i]["cessper"]);

                                    string chk1 = "";
                                    chk1 = tbl.Rows[i]["itcd"].ToString() + tbl.Rows[i]["stktype"].ToString() + tbl.Rows[i]["rate"].ToString();
                                    string boxdsp = "", sizedsp = "";
                                    double tpcs = 0, tnos = 0, scmdiscamt = 0, discamt = 0, taxableval = 0, basamt = 0, igstamt = 0, cgstamt = 0, sgstamt = 0, cessamt = 0;
                                    Int32 oldrow = i;
                                    double chkpcs = 0;
                                    while (tbl.Rows[i]["itcd"].ToString() + tbl.Rows[i]["stktype"].ToString() + tbl.Rows[i]["rate"].ToString() == chk1)
                                    {
                                        if (sizedsp != "") sizedsp += "+";
                                        sizedsp += tbl.Rows[i]["sizenm"];
                                        double dbboxes = Salesfunc.ConvPcstoBox(Convert.ToDouble(tbl.Rows[i]["qnty"]), Convert.ToDouble(tbl.Rows[i]["pcsperbox"]));
                                        if (boxdsp != "") boxdsp += "+";
                                        boxdsp += dbboxes.ToString();
                                        if (tbl.Rows[i]["stktype"].ToString() == "F") chkpcs = chkpcs + Convert.ToDouble(tbl.Rows[i]["qnty"]);
                                        tpcs = tpcs + Convert.ToDouble(tbl.Rows[i]["qnty"]);
                                        tnos = tnos + Convert.ToDouble(tbl.Rows[i]["nos"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["nos"]));
                                        scmdiscamt = scmdiscamt + Convert.ToDouble(tbl.Rows[i]["scmdiscamt"]);
                                        discamt = discamt + Convert.ToDouble(tbl.Rows[i]["discamt"]);
                                        taxableval = taxableval + (Convert.ToDouble(tbl.Rows[i]["basamt"]) - Convert.ToDouble(tbl.Rows[i]["scmdiscamt"]) - Convert.ToDouble(tbl.Rows[i]["discamt"]));
                                        basamt = basamt + Convert.ToDouble(tbl.Rows[i]["basamt"]);
                                        igstamt = igstamt + Convert.ToDouble(tbl.Rows[i]["igstamt"]);
                                        cgstamt = cgstamt + Convert.ToDouble(tbl.Rows[i]["cgstamt"]);
                                        sgstamt = sgstamt + Convert.ToDouble(tbl.Rows[i]["sgstamt"]);
                                        cessamt = cessamt + Convert.ToDouble(tbl.Rows[i]["cessamt"]);
                                        i++;
                                        if (i > maxR) break;
                                    }
                                    totboxes = totboxes + Salesfunc.ConvPcstoBox(chkpcs, Convert.ToDouble(tbl.Rows[i - 1]["pcsperbox"]));
                                    totsets = totsets + Salesfunc.ConvPcstoSet(chkpcs, Convert.ToDouble(tbl.Rows[i - 1]["pcsperset"]));
                                    //i = oldrow;
                                    i = i - 1;
                                    dr1["sizedsp"] = sizedsp;
                                    dr1["boxdsp"] = boxdsp;
                                    dr1["nos"] = tnos;  // tbl.Rows[i]["nos"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["nos"]);
                                    dr1["qnty"] = tpcs;
                                    dr1["scmdiscamt"] = scmdiscamt; // Convert.ToDouble(tbl.Rows[i]["scmdiscamt"]);
                                    dr1["discamt"] = discamt; // Convert.ToDouble(tbl.Rows[i]["discamt"]);
                                    dr1["taxableval"] = taxableval.ToINRFormat(); // (Convert.ToDouble(tbl.Rows[i]["basamt"]) - Convert.ToDouble(tbl.Rows[i]["scmdiscamt"]) - Convert.ToDouble(tbl.Rows[i]["discamt"])).ToINRFormat();
                                    dr1["basamt"] = basamt; // tbl.Rows[i]["basamt"] == DBNull.Value ? 0 : Convert.ToDouble(tbl.Rows[i]["basamt"]);
                                    dr1["basicamt"] = basamt.ToString(); // tbl.Rows[i]["basamt"].ToString();
                                    dr1["amt"] = basamt.ToString(); // tbl.Rows[i]["basamt"].ToString();
                                    dr1["cgstamt"] = cgstamt + igstamt; // Convert.ToDouble(tbl.Rows[i]["cgstamt"]) + Convert.ToDouble(tbl.Rows[i]["igstamt"]);
                                    dr1["sgstamt"] = sgstamt; // Convert.ToDouble(tbl.Rows[i]["sgstamt"]);
                                    dr1["cessamt"] = cessamt; // Convert.ToDouble(tbl.Rows[i]["cessamt"]);
                                    dr1["netamt"] = Convert.ToDouble(dr1["taxableval"].ToString()) + Convert.ToDouble(dr1["cgstamt"].ToString()) + Convert.ToDouble(dr1["sgstamt"].ToString()) + Convert.ToDouble(dr1["cessamt"].ToString());
                                    dr1["totboxes"] = totboxes.ToString() + " Boxes";
                                    //totals
                                    dnos = dnos + Convert.ToDouble(dr1["nos"].ToString());
                                    dqnty = dqnty + Convert.ToDouble(dr1["qnty"].ToString());
                                    dbasamt = dbasamt + Convert.ToDouble(dr1["basamt"].ToString());
                                    ddisc1 = ddisc1 + Convert.ToDouble(dr1["scmdiscamt"].ToString());
                                    ddisc2 = ddisc2 + Convert.ToDouble(dr1["discamt"].ToString());
                                    dtxblval = dtxblval + Convert.ToDouble(dr1["taxableval"].ToString());
                                    dcgstamt = dcgstamt + Convert.ToDouble(dr1["cgstamt"].ToString());
                                    dsgstamt = dsgstamt + Convert.ToDouble(dr1["sgstamt"].ToString());
                                    dnetamt = dnetamt + Convert.ToDouble(dr1["netamt"].ToString());
                                }
                                IR.Rows.Add(dr1);
                                if (totalreadyprint == false)
                                {
                                    if (i == maxR) doctotprint = true;
                                    else if (tbl.Rows[i + 1]["autono"].ToString() != auto1) doctotprint = true;
                                    else if (tbl.Rows[i + 1]["itcd"].ToString() == "") doctotprint = true;
                                }
                                if (delvchrg == true)
                                {
                                    doctotprint = true; totalreadyprint = false; delvchrg = false;
                                }
                                if (doctotprint == true && totalreadyprint == false)
                                {
                                    dr1 = IR.NewRow();
                                    dr1["autono"] = auto1 + copymode;
                                    dr1["copymode"] = copymode;
                                    dr1["docno"] = tbl.Rows[i]["docno"].ToString();
                                    dr1["caltype"] = 4;
                                    if (VE.MENU_PARA != "SOTH") dr1["itnm"] = "Total " + totboxes.ToString() + " Boxes / " + totsets.ToString()+" Sets";
                                    dr1["nos"] = dnos;
                                    dr1["qnty"] = dqnty;
                                    dr1["qdecimal"] = uommaxdecimal;
                                    dr1["basamt"] = dbasamt;
                                    dr1["scmdiscamt"] = ddisc1;
                                    dr1["discamt"] = ddisc2;
                                    dr1["taxableval"] = dtxblval.ToINRFormat();
                                    dr1["amt"] = dbasamt.ToString(); // dtxblval.ToINRFormat();
                                    dr1["cgstamt"] = dcgstamt;
                                    dr1["sgstamt"] = dsgstamt;
                                    dr1["netamt"] = dnetamt;
                                    totalreadyprint = true;
                                    goto docstart;
                                }
                            }
                            doctotprint = false;
                            i = i + 1;
                            ilast = i;
                            if (i > maxR) break;
                        }
                        i = ilast;
                    }
                }

                string[] compaddress; string stremail = "";
                compaddress = Salesfunc.retCompAddress(gocd, grpemailid).Split(Convert.ToChar(Cn.GCS()));
                stremail = compaddress[6];

                //Company Location 
                M_LOCA MLOCA = DBF.M_LOCA.Find(CommVar.Loccd(), CommVar.Compcd());
                M_COMP MCOMP = DBF.M_COMP.Find(CommVar.Compcd());

                var COMPADD1 = MCOMP.ADD1.retStr();
                var COMPADD2 = MCOMP.ADD2.retStr();
                var COMPADD3 = MCOMP.ADD3.retStr();
                var COMPGST = MLOCA.GSTNO.retStr();

                string email = MLOCA.REGEMAILID != null ? MLOCA.REGEMAILID : "";
                string phn1 = "";
                if (MLOCA.PHNO1 != null)
                {
                    if (MLOCA.PHNO1STD != null)
                    {
                        phn1 = MLOCA.PHNO1STD + " " + MLOCA.PHNO1;
                    }
                    else
                    {
                        phn1 = MLOCA.PHNO1.ToString();
                    }
                }


                string phn2 = "";
                if (MLOCA.PHNO2 != null)
                {
                    if (MLOCA.PHNO2STD != null)
                    {
                        phn1 = MLOCA.PHNO2STD + " " + MLOCA.PHNO2;
                    }
                    else
                    {
                        phn1 = MLOCA.PHNO2.ToString();
                    }
                }
                var COMPPHONO = phn1 == "" ? "" : phn1;
                COMPPHONO = phn2 == "" ? COMPPHONO : COMPPHONO + " " + phn2;
                var COMPPANNO = MCOMP.PANNO == null ? "" : MCOMP.PANNO;
                var COMPCINNO = MCOMP.CINNO == null ? "" : MCOMP.CINNO;

                string compphono = "033-22622100-03", compfax = "033-22622104";
                //end Company Location

                string ccemail = grpemailid;
                if (ccemail == "") ccemail = stremail;

                ReportDocument reportdocument = new ReportDocument();
                string complogo = Salesfunc.retCompLogo(), prodlogo = "CUCU";
                if (VE.DOCCD == "SBLCF") prodlogo = "CUFN";
                prodlogo = "c:\\improvar\\" + prodlogo + ".jpg";

                EmailControl EmailControl = new EmailControl();

                string MENU_PARA = VE.MENU_PARA;
                string sendemailids = "";
                string rptfile = "SaleBill_HPC.rpt";
                if (VE.TEXTBOX6 != null) rptfile = VE.TEXTBOX6;
                if (MENU_PARA == "SOTH") rptfile = "SaleBill_Oth.rpt";
                string rptname = "~/Report/" + rptfile; // "SaleBill.rpt";
                if (VE.maxdate == "CHALLAN") blhead = "CHALLAN";
                if (printemail == "Email")
                {
                    var rsemailid = (from DataRow dr in IR.Rows
                                     select new
                                     {
                                         email = dr["regemailid"]
                                     }).Distinct().ToList();

                    for (int z = 0; z < rsemailid.Count; z++)
                    {
                        if (rsemailid[z].email.ToString() != "")
                        {

                            var queryq = from row in IR.AsEnumerable()
                                         where row.Field<string>("regemailid") == rsemailid[z].email.ToString()
                                         select row;

                            var rsemailid1 = queryq.AsDataView().ToTable();
                            reportdocument.Load(Server.MapPath(rptname));

                            maxR = rsemailid1.Rows.Count - 1;
                            Int32 iz = 0;
                            string slnm = "", emlslcd = "", body = "", chkfld = "", chkfld1 = "";

                            while (iz <= maxR)
                            {
                                slnm = rsemailid1.Rows[iz]["slnm"].ToString();
                                emlslcd = rsemailid1.Rows[iz]["slcd"].ToString();
                                if (VE.Checkbox1 == true) grpemailid = rsemailid1.Rows[iz]["agregemailid"].ToString();

                                body += "<tr>";
                                body += "<td>" + rsemailid1.Rows[iz]["docno"] + "</td>";
                                body += "<td>" + rsemailid1.Rows[iz]["docdt"] + "</td>";
                                body += "<td style='text-align:right'>" + Cn.Indian_Number_format(Convert.ToDouble(rsemailid1.Rows[iz]["blamt"]).ToString(), "0.00") + "</td>";
                                body += "</tr>";

                                chkfld = rsemailid1.Rows[iz]["autono"].ToString().Substring(0, rsemailid1.Rows[iz]["autono"].ToString().Length - 1);

                                while (rsemailid1.Rows[iz]["autono"].ToString().Substring(0, rsemailid1.Rows[iz]["autono"].ToString().Length - 1) == chkfld)
                                {
                                    iz++;
                                    if (iz > maxR) break;
                                }
                            }
                            string uid = Session["UR_ID"].ToString();
                            string MOBILE = DB1.USER_APPL.Find(uid).MOBILE;
                            string usrEMAIL = DB1.USER_APPL.Find(uid).EMAIL;
                            string ldt = rsemailid1.Rows[rsemailid1.Rows.Count - 1]["docdt"].ToString();

                            reportdocument.SetDataSource(rsemailid1);
                            reportdocument.SetParameterValue("complogo", complogo);
                            reportdocument.SetParameterValue("prodlogo", prodlogo);
                            reportdocument.SetParameterValue("billheading", blhead);
                            reportdocument.SetParameterValue("compnm", compaddress[0]);
                            reportdocument.SetParameterValue("compadd1", COMPADD1);
                            reportdocument.SetParameterValue("compadd2", COMPADD2);
                            reportdocument.SetParameterValue("compadd3", COMPADD3);
                            reportdocument.SetParameterValue("comppanno", COMPPANNO);
                            reportdocument.SetParameterValue("compgstno", COMPGST);
                            reportdocument.SetParameterValue("compcinno", COMPCINNO);
                            reportdocument.SetParameterValue("compphno", compphono);
                            reportdocument.SetParameterValue("compfax",compfax);
                            reportdocument.SetParameterValue("compemail", email);
                            reportdocument.SetParameterValue("compadd", compaddress[1]);
                            reportdocument.SetParameterValue("compstat", compaddress[2]);
                            reportdocument.SetParameterValue("locaadd", compaddress[3]);
                            reportdocument.SetParameterValue("locastat", compaddress[4]);
                            reportdocument.SetParameterValue("legalname", compaddress[5]);

                            Response.Buffer = false;
                            Response.ClearContent();
                            Response.ClearHeaders();
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            string path_Save = @"C:\improvar\" + doccd + "-" + emlslcd + "-" + ldt.Substring(6, 4) + ldt.Substring(3, 2) + ldt.Substring(0, 2) + ".pdf";
                            if (System.IO.File.Exists(path_Save))
                            {
                                System.IO.File.Delete(path_Save);
                            }
                            reportdocument.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, path_Save);
                            reportdocument.Dispose();
                            // email

                            System.Net.Mail.Attachment attchmail = new System.Net.Mail.Attachment(path_Save);

                            string[,] emlaryBody = new string[8, 2];
                            string godemaild = "";
                            if (godemaild != "")
                            {
                                bool emailsent = EmailControl.SendHtmlFormattedEmail(godemaild, "", "", emlaryBody, attchmail, grpemailid);
                                if (emailsent == true) sendemailids = sendemailids + godemaild + ";"; else sendemailids = " not able to send on " + godemaild + ";";
                            }
                            else
                            {
                                emlaryBody[0, 0] = "{slnm}"; emlaryBody[0, 1] = slnm;
                                emlaryBody[1, 0] = "{tbody}"; emlaryBody[1, 1] = body;
                                emlaryBody[2, 0] = "{username}"; emlaryBody[2, 1] = System.Web.HttpContext.Current.Session["UR_NAME"].ToString();
                                emlaryBody[3, 0] = "{compname}"; emlaryBody[3, 1] = compaddress[0];
                                emlaryBody[4, 0] = "{usermobno}"; emlaryBody[4, 1] = MOBILE;
                                emlaryBody[5, 0] = "{complogo}"; emlaryBody[5, 1] = complogo;
                                emlaryBody[6, 0] = "{compfixlogo}"; emlaryBody[6, 1] = prodlogo;
                                emlaryBody[7, 0] = "{useremail}"; emlaryBody[7, 1] = usrEMAIL;
                                bool emailsent = EmailControl.SendHtmlFormattedEmail(rsemailid[z].email.ToString(), "Sales Bill copy of " + docnm, "Salebill.htm", emlaryBody, attchmail, grpemailid);
                                if (emailsent == true) sendemailids = sendemailids + rsemailid[z].email.ToString() + ";"; else sendemailids = sendemailids + " not able to send on " + rsemailid[z].email.ToString();
                            }
                            System.IO.File.Delete(path_Save);
                            //eof email sending
                        }
                    }
                    string emailretmsg = "email : " + sendemailids + "<br /> CC email on " + grpemailid;
                    return Content(emailretmsg);
                }
                else
                {
                    reportdocument.Load(Server.MapPath(rptname));

                    reportdocument.SetDataSource(IR);
                    reportdocument.SetParameterValue("complogo", complogo);
                    reportdocument.SetParameterValue("prodlogo", prodlogo);
                    reportdocument.SetParameterValue("billheading", blhead);
                    reportdocument.SetParameterValue("compnm", compaddress[0]);
                    reportdocument.SetParameterValue("compadd1", COMPADD1);
                    reportdocument.SetParameterValue("compadd2", COMPADD2);
                    reportdocument.SetParameterValue("compadd3", COMPADD3);
                    reportdocument.SetParameterValue("comppanno", COMPPANNO);
                    reportdocument.SetParameterValue("compgstno", COMPGST);
                    reportdocument.SetParameterValue("compcinno", COMPCINNO);
                    reportdocument.SetParameterValue("compphno", compphono);
                    reportdocument.SetParameterValue("compfax",compfax);
                    reportdocument.SetParameterValue("compemail", email);
                    reportdocument.SetParameterValue("compadd", compaddress[1]);
                    reportdocument.SetParameterValue("compstat", compaddress[2]);
                    reportdocument.SetParameterValue("locaadd", compaddress[3]);
                    reportdocument.SetParameterValue("locastat", compaddress[4]);
                    reportdocument.SetParameterValue("legalname", compaddress[5]);

                    if (printemail == "Excel")
                    {
                        string path_Save = @"C:\improvar\" + doccd + VE.FDOCNO+".xls";
                        string exlfilename = doccd + VE.FDOCNO + ".xls";
                        if (System.IO.File.Exists(path_Save))
                        {
                            System.IO.File.Delete(path_Save);
                        }
                        reportdocument.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.Excel, path_Save);
                        byte[] buffer = System.IO.File.ReadAllBytes(path_Save);
                        Response.ClearContent();
                        Response.Buffer = true;
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.AddHeader("Content-Disposition", "attachment; filename=Rep_Comm_Bill.xls");
                        Response.BinaryWrite(buffer);
                        reportdocument.Dispose();
                        Response.Flush();
                        Response.End();
                        return Content("Excel exported sucessfully");
                    }
                    else
                    {
                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();
                        Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        reportdocument.Dispose();
                        return new FileStreamResult(stream, "application/pdf");
                    }
                }
            }
            catch (Exception ex)
            {
                return Content(ex.Message);
            }
        }
        public string retDiscType(string disctype, double discrate)
        {
            string rtval = "";
            switch (disctype)
            {
                case "Q":
                    rtval = "@ " + discrate.ToString() + " Per Pc"; break;
                case "B":
                    rtval = "@ " + discrate.ToString() + " Per Box"; break;
                case "F":
                    rtval = ""; break;
                default:
                    rtval = "@ " + discrate.ToString() + "%"; break;
            }
            return rtval;
        }
    }
}